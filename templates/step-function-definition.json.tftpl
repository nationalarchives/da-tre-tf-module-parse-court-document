{
  "Comment": "Prepares parser parameters from TRE msg, runs parser & emits TRE msgs for success/failure",
  "StartAt": "Prepare output parameters",
  "States": {
    "Prepare output parameters": {
      "Type": "Pass",
      "Parameters": {
        "required": {
          "parameters": {
            "reference.$": "$.parameters.reference",
            "s3FolderName.$": "States.Format('court-documents/{}/{}/', $.parameters.reference, $.properties.executionId)",
            "s3Bucket": "${tre_data_bucket}"
          }
        },
        "optional": {
          "parameters": {}
        }
      },
      "Next": "Check optional output parameter",
      "ResultPath": "$.output"
    },
    "Check optional output parameter": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.parameters.originator",
          "IsPresent": true,
          "Next": "Pass optional output parameter"
        }
      ],
      "Default": "Parse Court Document"
    },
    "Pass optional output parameter": {
      "Type": "Pass",
      "Next": "Parse Court Document",
      "Parameters": {
        "parameters": {
          "originator.$": "$.parameters.originator"
        }
      },
      "ResultPath": "$.output.optional"
    },
    "Parse Court Document": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "xml.$": "$.Payload.parser-outputs.xml",
        "metadata.$": "$.Payload.parser-outputs.metadata",
        "images.$": "$.Payload.parser-outputs.images",
        "log.$": "$.Payload.parser-outputs.log",
        "error-messages.$": "$.Payload.parser-outputs.error-messages"
      },
      "ResultPath": "$.parser-outputs",
      "Parameters": {
        "Payload": {
          "parser-inputs": {
            "consignment-reference.$": "$.parameters.reference",
            "s3-bucket": "${tre_data_bucket}",
            "s3-input-bucket.$": "$.parameters.s3Bucket",
            "s3-input-key.$": "$.parameters.s3Key",
            "document-type.$": "$.parameters.parserInstructions.documentType",
            "s3-output-prefix.$": "States.Format('court-documents/{}/{}/', $.parameters.reference, $.properties.executionId)"
          }
        },
        "FunctionName": "${arn_lambda_court_document_parse}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Check for parser errors",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Prepare TRE Error",
          "ResultPath": "$.lambda-output.payload.parameters.errors"
        }
      ]
    },
    "Check for parser errors": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.parser-outputs.error-messages[0]",
          "IsPresent": true,
          "Next": "Prepare parser error parameters"
        },
        {
          "Not": {
            "Variable": "$.parser-outputs.error-messages",
            "IsPresent": true
          },
          "Next": "Unhandled Error Prep"
        }
      ],
      "Default": "Prepare parser success parameters"
    },
    "Prepare parser success parameters": {
      "Type": "Pass",
      "Next": "SNS Publish tre-internal",
      "Parameters": "COURT_DOCUMENT_PARSE_NO_ERRORS",
      "ResultPath": "$.output.required.parameters.status"
    },
    "Prepare parser error parameters": {
      "Type": "Pass",
      "Next": "SNS Publish tre-internal",
      "Parameters": "COURT_DOCUMENT_PARSE_WITH_ERRORS",
      "ResultPath": "$.output.required.parameters.status"
    },
    "Unhandled Error Prep": {
      "Type": "Pass",
      "Parameters": {
        "lambda-output": {
          "payload": {
            "parameters": {
              "errors.$": "$.parser-outputs"
            }
          }
        },
        "parameters.$": "$.parameters",
        "properties.$": "$.properties",
        "output.$": "$.output"
      },
      "ResultPath": "$.temp",
      "OutputPath": "$.temp",
      "Next": "Prepare TRE Error"
    },
    "Prepare TRE Error": {
      "Type" :"Pass",
      "Parameters": {
        "status": "TRE_ERROR",
        "reference.$": "$.parameters.reference",
        "errors.$": "$.lambda-output.payload.parameters.errors"
      },
      "ResultPath": "$.output.error.parameters",
      "Next": "Error -> tre-internal"
    },
    "SNS Publish tre-internal": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "properties": {
            "messageType": "uk.gov.nationalarchives.tre.messages.courtdocument.parse.CourtDocumentParse",
            "timestamp.$": "$$.State.EnteredTime",
            "function": "tre-tf-module-parse-judgment",
            "producer": "TRE",
            "executionId.$": "$.properties.executionId",
            "parentExecutionId.$": "$.properties.parentExecutionId"
          },
          "parameters.$": "States.JsonMerge($.output.required.parameters, $.output.optional.parameters, false)"
        },
        "TopicArn": "${arn_sns_topic_court_document_parse_out}"
      },
      "Next": "Choose slack message",
      "ResultPath": null
    },
    "Error -> tre-internal": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "properties": {
            "messageType": "uk.gov.nationalarchives.tre.messages.Error",
            "timestamp.$": "$$.State.EnteredTime",
            "function": "tre-tf-module-judgment-parser",
            "producer": "TRE",
            "executionId.$": "$.properties.executionId",
            "parentExecutionId.$": "$.properties.parentExecutionId"
          },
          "parameters.$": "States.JsonMerge($.output.error.parameters, $.output.optional.parameters, false)"
        },
        "TopicArn": "${arn_sns_topic_court_document_parse_out}"
      },
      "Next": "TRE Error -> Slack",
      "ResultPath": null
    },
    "Choose slack message": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.output.required.parameters.status",
          "StringEquals": "COURT_DOCUMENT_PARSE_NO_ERRORS",
          "Next": "Parser success -> Slack"
        }
      ],
      "Default": "Parser error -> Slack"
    },
    "Parser success -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "success",
          "Event": "Parse Court Document"
        },
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}"
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "TRE Error -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}",
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.lambda-output.payload.parameters.errors",
          "Event": "TRE Error (Parse Court Document)"
        }
      },
      "Next": "Failed"
    },
    "Failed": {
      "Type": "Fail"
    },
    "Parser error -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.parser-outputs.error-messages",
          "Event": "Parse Court Document Error"
        },
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}"
      },
      "Next": "Success"
    }
  }
}

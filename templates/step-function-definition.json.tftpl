{
  "Comment": "A description of my state machine",
  "StartAt": "Parse Judgment",
  "States": {
    "Parse Judgment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${arn_lambda_parse_judgment}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Parse-judgment Output Handler",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Parse Judgment Lambda Error -> Slack"
        }
      ]
    },
    "Parse-judgment Output Handler": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.producer.event-name",
              "StringEquals": "parsed-judgment-available"
            },
            {
              "Variable": "$.producer.event-name",
              "StringEquals": "parse-judgment-error"
            }
          ],
          "Next": "SNS Publish tre-internal"
        }
      ],
      "Default": "Parse Judgment Unhandled Event -> Slack"
    },
    "SNS Publish tre-internal": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "MessageAttributes": {
          "environment": {
            "DataType": "String",
            "StringValue.$": "$.producer.environment"
          },
          "name": {
            "DataType": "String",
            "StringValue.$": "$.producer.name"
          },
          "process": {
            "DataType": "String",
            "StringValue.$": "$.producer.process"
          },
          "type": {
            "DataType": "String",
            "StringValue.$": "$.producer.type"
          },
          "event-name": {
            "DataType": "String",
            "StringValue.$": "$.producer.event-name"
          }
        },
        "Message.$": "$",
        "TopicArn": "${arn_sns_topic_parse_judgment_out}"
      },
      "Next": "Choice",
      "ResultPath": null
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.producer.event-name",
              "StringEquals": "parse-judgment-error"
            },
            {
              "Variable": "$.producer.event-name",
              "StringEquals": "parsed-judgment-available"
            }
          ],
          "Next": "Success"
        }
      ],
      "Default": "Unhandled Event -> Slack"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Parse Judgment Unhandled Event -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.producer.event-name",
          "Event": "Invalid event name"
        },
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}"
      },
      "Next": "Parse Judgment Unhandled Event"
    },
    "Parse Judgment Unhandled Event": {
      "Type": "Fail"
    },
    "Parse Judgment Lambda Error -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}",
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.Cause",
          "Event": "Lambda Error (Parse Judgment)"
        }
      },
      "Next": "Parse Judgment Failed"
    },
    "Parse Judgment Failed": {
      "Type": "Fail"
    },
    "Unhandled Event -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.producer.event-name",
          "Event": "Invalid event name"
        },
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}"
      },
      "Next": "Unhandled Event"
    },
    "Unhandled Event": {
      "Type": "Fail"
    }
  }
}

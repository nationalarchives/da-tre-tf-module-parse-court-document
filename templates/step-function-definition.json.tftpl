{
  "Comment": "A description of my state machine",
  "StartAt": "Parse Judgment",
  "States": {
    "Parse Judgment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "xml.$": "$.Payload.parser-outputs.xml",
        "metadata.$": "$.Payload.parser-outputs.metadata",
        "images.$": "$.Payload.parser-outputs.images",
        "log.$": "$.Payload.parser-outputs.log",
        "error-messages.$": "$.Payload.parser-outputs.error-messages"
      },
      "ResultPath": "$.parser-outputs",
      "Parameters": {
        "Payload": {
          "parser-inputs": {
            "consignment-reference.$": "$.parser-inputs.consignment-reference",
            "s3-bucket.$": "$.parser-inputs.s3-bucket",
            "document-url.$": "$.parser-inputs.document-url",
            "attachment-urls.$": "$.parser-inputs.attachment-urls",
            "s3-output-prefix.$": "$.parser-inputs.s3-output-prefix"
          }
        },
        "FunctionName": "${arn_lambda_parse_judgment}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Check for parser errors",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Parse Judgment Lambda Error -> Slack"
        }
      ]
    },
    "Check for parser errors": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.parser-outputs.error-messages[0]",
          "IsPresent": true,
          "Next": "Name as parser error"
        }
      ],
      "Default": "Name as parser success"
    },
    "Name as parser success": {
      "Type": "Pass",
      "Next": "SNS Publish tre-internal",
      "Result": "parsed-judgment",
      "ResultPath": "$.event-name"
    },
    "Name as parser error": {
      "Type": "Pass",
      "Next": "SNS Publish tre-internal",
      "Result": "parsed-judgment-error",
      "ResultPath": "$.event-name"
    },
    "SNS Publish tre-internal": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "MessageAttributes": {
          "environment": {
            "DataType": "String",
            "StringValue.$": "$.producer.environment"
          },
          "name": {
            "DataType": "String",
            "StringValue.$": "$.producer.name"
          },
          "process": {
            "DataType": "String",
            "StringValue.$": "$.producer.process"
          },
          "type": {
            "DataType": "String",
            "StringValue.$": "$.producer.type"
          },
          "event-name": {
            "DataType": "String",
            "StringValue.$": "$.event-name"
          }
        },
        "Message": {
          "properties": {
            "messageType": "tna.tre.messages.parsed.judgment.TREParsedJudgment",
            "timestampMillis": 23345678,
            "function": "tre-tf-module-parse-judgment",
            "producer": "TRE",
            "executionId": "executionId344",
            "parentExecutionId": null
          },
          "parameters": {
            "s3FolderName.$": "$.parser-inputs.s3-output-prefix",
            "s3Bucket.$": "$.parser-inputs.s3-bucket",
            "reference.$": "$.parameters.judgment.reference"
          }
        },
        "TopicArn": "${arn_sns_topic_parse_judgment_out}"
      },
      "Next": "Choose slack message",
      "ResultPath": null
    },
    "Choose slack message": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.event-name",
          "StringEquals": "parsed-judgment",
          "Next": "Parser success -> Slack"
        }
      ],
      "Default": "Parser error -> Slack"
    },
    "Parser success -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "success",
          "Event.$": "$.event-name"
        },
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}"
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Parse Judgment Lambda Error -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}",
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.Cause",
          "Event": "Lambda Error (Parse Judgment)"
        }
      },
      "Next": "Parse Judgment Failed"
    },
    "Parse Judgment Failed": {
      "Type": "Fail"
    },
    "Parser error -> Slack": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "Execution.$": "$$.Execution.Name",
          "StateMachine.$": "$$.StateMachine.Name",
          "Status": "error",
          "ErrorMessage.$": "$.producer.event-name",
          "Event.$": "$.event-name"
        },
        "TopicArn": "${arn_sns_topic_tre_slack_alerts}"
      },
      "Next": "Success"
    }
  }
}
